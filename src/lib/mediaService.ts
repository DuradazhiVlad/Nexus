import { supabase } from './supabase';

export interface MediaUploadResult {
  url: string;
  filename: string;
  fileSize: number;
  type: 'image' | 'video';
}

export class MediaService {
  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –Ω–∞ Supabase Storage
   */
  static async uploadFile(
    file: File, 
    bucket: string = 'media',
    folder: string = 'uploads'
  ): Promise<MediaUploadResult> {
    try {
      console.log('üîç Uploading file:', {
        name: file.name,
        size: file.size,
        type: file.type
      });

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ñ–∞–π–ª—É
      if (!file.type.startsWith('image/') && !file.type.startsWith('video/')) {
        throw new Error('–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª–∏');
      }

      // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
      const timestamp = Date.now();
      const randomString = Math.random().toString(36).substring(2, 15);
      const extension = file.name.split('.').pop();
      const filename = `${folder}/${timestamp}_${randomString}.${extension}`;

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
      const { data, error } = await supabase.storage
        .from(bucket)
        .upload(filename, file, {
          cacheControl: '3600',
          upsert: false
        });

      if (error) {
        console.error('‚ùå Upload error:', error);
        throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${error.message}`);
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π URL
      const { data: urlData } = supabase.storage
        .from(bucket)
        .getPublicUrl(filename);

      console.log('‚úÖ File uploaded successfully:', {
        filename: data.path,
        url: urlData.publicUrl,
        size: file.size
      });

      return {
        url: urlData.publicUrl,
        filename: data.path,
        fileSize: file.size,
        type: file.type.startsWith('image/') ? 'image' : 'video'
      };
    } catch (error) {
      console.error('‚ùå Media upload error:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
   */
  static async uploadProfileImage(file: File): Promise<string> {
    try {
      console.log('üîç Uploading profile image:', file.name);

      if (!file.type.startsWith('image/')) {
        throw new Error('–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è');
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É (–º–∞–∫—Å–∏–º—É–º 5MB)
      if (file.size > 5 * 1024 * 1024) {
        throw new Error('–†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 5MB');
      }

      const result = await this.uploadFile(file, 'avatars', 'profile');
      return result.url;
    } catch (error) {
      console.error('‚ùå Profile image upload error:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –ø—Ä–æ—Ñ—ñ–ª—é
   */
  static async uploadCoverImage(file: File): Promise<string> {
    try {
      console.log('üîç Uploading cover image:', file.name);

      if (!file.type.startsWith('image/')) {
        throw new Error('–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è');
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É (–º–∞–∫—Å–∏–º—É–º 10MB)
      if (file.size > 10 * 1024 * 1024) {
        throw new Error('–†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 10MB');
      }

      const result = await this.uploadFile(file, 'covers', 'profile');
      return result.url;
    } catch (error) {
      console.error('‚ùå Cover image upload error:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–µ–¥—ñ–∞ –¥–ª—è –ø–æ—Å—Ç—É
   */
  static async uploadPostMedia(file: File): Promise<MediaUploadResult> {
    try {
      console.log('üîç Uploading post media:', file.name);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É (–º–∞–∫—Å–∏–º—É–º 50MB –¥–ª—è –≤—ñ–¥–µ–æ, 10MB –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å)
      const maxSize = file.type.startsWith('video/') ? 50 * 1024 * 1024 : 10 * 1024 * 1024;
      if (file.size > maxSize) {
        const maxSizeMB = maxSize / (1024 * 1024);
        throw new Error(`–†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ ${maxSizeMB}MB`);
      }

      return await this.uploadFile(file, 'posts', 'media');
    } catch (error) {
      console.error('‚ùå Post media upload error:', error);
      throw error;
    }
  }

  /**
   * –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª –∑ Storage
   */
  static async deleteFile(filename: string, bucket: string = 'media'): Promise<void> {
    try {
      console.log('üîç Deleting file:', filename);

      const { error } = await supabase.storage
        .from(bucket)
        .remove([filename]);

      if (error) {
        console.error('‚ùå Delete error:', error);
        throw new Error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ${error.message}`);
      }

      console.log('‚úÖ File deleted successfully:', filename);
    } catch (error) {
      console.error('‚ùå File deletion error:', error);
      throw error;
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ç–∏–ø–∏ —Ñ–∞–π–ª—ñ–≤
   */
  static isSupportedFileType(file: File): boolean {
    const supportedImageTypes = [
      'image/jpeg',
      'image/jpg', 
      'image/png',
      'image/gif',
      'image/webp'
    ];
    
    const supportedVideoTypes = [
      'video/mp4',
      'video/webm',
      'video/ogg',
      'video/quicktime'
    ];

    return [...supportedImageTypes, ...supportedVideoTypes].includes(file.type);
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
   */
  static formatFileSize(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
}

export async function getUserMedia(user_id: string, type?: 'photo' | 'video') {
  let query = supabase.from('media').select('*').eq('user_id', user_id);
  if (type) query = query.eq('type', type);
  const { data, error } = await query.order('created_at', { ascending: false });
  if (error) throw error;
  return data;
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–¥—ñ–∞ (–∑ –ë–î —ñ –∑ Supabase Storage)
export async function deleteMedia(mediaId: string, filePath: string) {
  // –í–∏–¥–∞–ª–∏—Ç–∏ –∑ Storage
  const { error: storageError } = await supabase.storage.from('media').remove([filePath]);
  if (storageError) throw storageError;
  // –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –ë–î
  const { error: dbError } = await supabase.from('media').delete().eq('id', mediaId);
  if (dbError) throw dbError;
  return true;
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–ø–∏—Å—É –º–µ–¥—ñ–∞
export async function updateMediaDescription(mediaId: string, description: string) {
  const { error } = await supabase.from('media').update({ description }).eq('id', mediaId);
  if (error) throw error;
  return true;
} 