import React from 'react';
import { Sidebar } from '../../components/Sidebar';
import { Check, AlertCircle } from 'lucide-react';
import { useProfile, usePosts } from './hooks';
import { 
  ProfileHeader, 
  ProfileInfo, 
  ProfileEditForm, 
  ProfileStats, 
  CreatePostForm, 
  PostsSection 
} from './components';
import { supabase } from '../../lib/supabase';
import { ErrorNotification } from '../../components/ErrorNotification';

export function ProfileNew() {
  const profileHook = useProfile();
  
  if (!profileHook) return <div>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é</div>;
  
  const {
    profile,
    loading,
    error,
    success,
    isEditing,
    saving,
    currentUser,
    editForm,
    setEditForm,
    setError,
    setSuccess,
    setIsEditing,
    saveProfile,
    handleAvatarChange,
    cancelEdit,
    addHobby,
    removeHobby,
    addLanguage,
    removeLanguage,
    updateEditForm,
    updateNestedField
  } = profileHook;

  const {
    postContent,
    setPostContent,
    postMediaUrl,
    setPostMediaUrl,
    postMediaType,
    setPostMediaType,
    creatingPost,
    showEmojiPicker,
    setShowEmojiPicker,
    showMediaInput,
    setShowMediaInput,
    characterCount,
    userPosts,
    setUserPosts,
    loadingPosts,
    MAX_CHARACTERS,
    EMOJIS,
    addEmoji,
    handleCreatePost,
    loadUserPosts
  } = usePosts(currentUser, profile);

  // Monitor profile state changes
  React.useEffect(() => {
    if (profile) {
      console.log('üîÑ Profile state updated:');
      console.log('üîç Profile hobbies:', profile.hobbies);
      console.log('üîç Profile languages:', profile.languages);
      console.log('üîç Profile hobbies length:', profile.hobbies?.length);
      console.log('üîç Profile languages length:', profile.languages?.length);
    }
  }, [profile]);



  if (loading) {
    return (
      <div className="flex min-h-screen bg-gray-50">
        <Sidebar />
        <div className="flex-1 lg:ml-64 p-8">
          <div className="max-w-4xl mx-auto">
            <div className="text-center py-12">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <p className="text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é...</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error && !profile) {
    return (
      <div className="flex min-h-screen bg-gray-50">
        <Sidebar />
        <div className="flex-1 lg:ml-64 p-8">
          <div className="max-w-4xl mx-auto">
            <div className="text-center py-12">
              <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
              <h2 className="text-xl font-semibold text-gray-900 mb-2">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h2>
              <p className="text-gray-600 mb-4">{error}</p>
              <button
                onClick={() => window.location.reload()}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!profile) {
    return (
      <div className="flex min-h-screen bg-gray-50">
        <Sidebar />
        <div className="flex-1 lg:ml-64 p-8">
          <div className="max-w-4xl mx-auto">
            <div className="text-center py-12">
              <AlertCircle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h2 className="text-xl font-semibold text-gray-900 mb-2">–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h2>
              <p className="text-gray-600">–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex min-h-screen bg-gray-50">
      <Sidebar />
      <div className="flex-1 lg:ml-64 p-8">
        <div className="max-w-4xl mx-auto">
          {/* Success/Error Messages */}
          {success && (
            <ErrorNotification 
              type="success"
              title="–£—Å–ø—ñ—Ö!"
              message={success}
              autoClose={true}
              duration={3000}
              onClose={() => setSuccess(null)}
            />
          )}
          
          {error && (
            <ErrorNotification 
              type="error"
              title="–ü–æ–º–∏–ª–∫–∞!"
              message={error}
              details={error.includes('–ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó') ? '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –≤–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ' : 
                       error.includes('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é') ? '–°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É' : 
                       error.includes('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é') ? '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö' : 
                       '–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞'}
              showRetry={error.includes('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é')}
              onRetry={() => window.location.reload()}
              onClose={() => setError(null)}
            />
          )}





          {/* Profile Header */}
          <ProfileHeader
            profile={profile}
            isEditing={isEditing}
            saving={saving}
            onEdit={() => setIsEditing(true)}
            onSave={saveProfile}
            onCancel={cancelEdit}
            onAvatarChange={handleAvatarChange}
          />

          {/* Profile Info (when not editing) */}
          {!isEditing && (profile.education || profile.work || profile.phone || profile.website || profile.hobbies?.length || profile.languages?.length) && (
            <ProfileInfo profile={profile} />
          )}

          {/* Profile Edit Form */}
          {isEditing && (
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
              <ProfileEditForm
                editForm={editForm}
                setEditForm={setEditForm}
                addHobby={addHobby}
                removeHobby={removeHobby}
                addLanguage={addLanguage}
                removeLanguage={removeLanguage}
                setError={setError}
              />
            </div>
          )}

          {/* Stats */}
          <ProfileStats userPosts={userPosts} friendsCount={profile?.friends_count || 0} />

          {/* Posts Section */}
          <div className="mb-6">
            <CreatePostForm
              profile={profile}
              postContent={postContent}
              setPostContent={setPostContent}
              postMediaUrl={postMediaUrl}
              setPostMediaUrl={setPostMediaUrl}
              postMediaType={postMediaType}
              setPostMediaType={setPostMediaType}
              creatingPost={creatingPost}
              showEmojiPicker={showEmojiPicker}
              setShowEmojiPicker={setShowEmojiPicker}
              showMediaInput={showMediaInput}
              setShowMediaInput={setShowMediaInput}
              characterCount={characterCount}
              MAX_CHARACTERS={MAX_CHARACTERS}
              EMOJIS={EMOJIS}
              addEmoji={addEmoji}
              handleCreatePost={handleCreatePost}
            />
          </div>

          <PostsSection
            loadingPosts={loadingPosts}
            userPosts={userPosts}
            currentUser={currentUser}
            profile={profile}
            setUserPosts={setUserPosts}
          />
        </div>
      </div>
    </div>
  );
}