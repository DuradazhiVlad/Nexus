import { supabase } from '../../../lib/supabase';
import { UserDetail, UserPost, FriendRequest, Friendship } from '../types';

export class UserService {
  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  static async getUserDetail(userId: string): Promise<UserDetail | null> {
    try {
      console.log('üîç UserService: Fetching user detail for:', userId);
      
      const { data, error } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('auth_user_id', userId)
        .maybeSingle();

      if (error) {
        console.error('‚ùå UserService: Error fetching user detail:', error);
        throw error;
      }

      if (!data) {
        console.log('‚ö†Ô∏è UserService: User not found:', userId);
        return null;
      }

      console.log('‚úÖ UserService: User detail fetched:', data);
      return data;
    } catch (error) {
      console.error('‚ùå UserService: Unexpected error:', error);
      throw error;
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  static async getUserPosts(userId: string): Promise<UserPost[]> {
    try {
      console.log('üîç UserService: Fetching posts for user:', userId);
      
      const { data, error } = await supabase
        .from('posts')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå UserService: Error fetching user posts:', error);
        throw error;
      }

      console.log('‚úÖ UserService: User posts fetched:', data);
      return data || [];
    } catch (error) {
      console.error('‚ùå UserService: Unexpected error:', error);
      return [];
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –¥—Ä—É–∑—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  static async getUserFriends(userId: string): Promise<UserDetail[]> {
    try {
      console.log('üîç UserService: Fetching friends for user:', userId);
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –¥—Ä—É–∂–±–∏ –¥–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î user1
      const { data: friendships1, error: error1 } = await supabase
        .from('friendships')
        .select('user2_id')
        .eq('user1_id', userId);

      // –û—Ç—Ä–∏–º—É—î–º–æ –¥—Ä—É–∂–±–∏ –¥–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î user2
      const { data: friendships2, error: error2 } = await supabase
        .from('friendships')
        .select('user1_id')
        .eq('user2_id', userId);

      if (error1 || error2) {
        console.error('‚ùå UserService: Error fetching friendships:', error1 || error2);
        throw error1 || error2;
      }

      // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ—Ö –¥—Ä—É–∑—ñ–≤
      const friendIds = [
        ...(friendships1 || []).map(f => f.user2_id),
        ...(friendships2 || []).map(f => f.user1_id)
      ];

      if (friendIds.length === 0) {
        return [];
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥—Ä—É–∑—ñ–≤
      const { data: friends, error: friendsError } = await supabase
        .from('user_profiles')
        .select('*')
        .in('auth_user_id', friendIds);

      if (friendsError) {
        console.error('‚ùå UserService: Error fetching friends:', friendsError);
        throw friendsError;
      }

      console.log('‚úÖ UserService: Friends fetched:', friends);
      return friends || [];
    } catch (error) {
      console.error('‚ùå UserService: Unexpected error:', error);
      return [];
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –¥—Ä—É–∂–±–∏
   */
  static async getFriendshipStatus(userId: string, friendId: string): Promise<'friends' | 'pending' | 'none'> {
    try {
      console.log('üîç UserService: Checking friendship status between:', userId, 'and', friendId);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥—Ä—É–∂–±–∞
      const { data: friendship, error: friendshipError } = await supabase
        .from('friendships')
        .select('*')
        .or(`and(user1_id.eq.${userId},user2_id.eq.${friendId}),and(user1_id.eq.${friendId},user2_id.eq.${userId})`)
        .single();

      if (friendshipError && friendshipError.code !== 'PGRST116') {
        console.error('‚ùå UserService: Error checking friendship:', friendshipError);
        throw friendshipError;
      }

      if (friendship) {
        console.log('‚úÖ UserService: Users are friends');
        return 'friends';
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∑–∞–ø–∏—Ç –Ω–∞ –¥—Ä—É–∂–±—É
      const { data: request, error: requestError } = await supabase
        .from('friend_requests')
        .select('*')
        .or(`and(user_id.eq.${userId},friend_id.eq.${friendId}),and(user_id.eq.${friendId},friend_id.eq.${userId})`)
        .eq('status', 'pending')
        .single();

      if (requestError && requestError.code !== 'PGRST116') {
        console.error('‚ùå UserService: Error checking friend request:', requestError);
        throw requestError;
      }

      if (request) {
        console.log('‚úÖ UserService: Friend request pending');
        return 'pending';
      }

      console.log('‚úÖ UserService: No friendship or request');
      return 'none';
    } catch (error) {
      console.error('‚ùå UserService: Unexpected error:', error);
      return 'none';
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –¥—Ä—É–∂–±—É
   */
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ DatabaseService –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –¥—Ä—É–∂–±—É
  static async sendFriendRequest(friendId: string): Promise<boolean> {
    const { DatabaseService } = await import('../../../lib/database');
    return DatabaseService.sendFriendRequest(friendId);
  }

  /**
   * –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –¥—Ä—É–∂–±—É
   */
  static async acceptFriendRequest(requestId: string): Promise<boolean> {
    try {
      console.log('üîç UserService: Accepting friend request:', requestId);
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ø–∏—Ç
      const { data: request, error: getError } = await supabase
        .from('friend_requests')
        .select('*')
        .eq('id', requestId)
        .maybeSingle();

      if (getError) {
        console.error('‚ùå UserService: Error getting friend request:', getError);
        throw getError;
      }

      if (!request) {
        console.error('‚ùå UserService: Friend request not found:', requestId);
        throw new Error('–ó–∞–ø–∏—Ç –Ω–∞ –¥—Ä—É–∂–±—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Ç—É
      const { error: updateError } = await supabase
        .from('friend_requests')
        .update({ status: 'accepted' })
        .eq('id', requestId);

      if (updateError) {
        console.error('‚ùå UserService: Error updating friend request:', updateError);
        throw updateError;
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –¥—Ä—É–∂–±—É
      const { error: friendshipError } = await supabase
        .from('friendships')
        .insert([{
          user1_id: request.user_id,
          user2_id: request.friend_id
        }]);

      if (friendshipError) {
        console.error('‚ùå UserService: Error creating friendship:', friendshipError);
        throw friendshipError;
      }

      console.log('‚úÖ UserService: Friend request accepted successfully');
      return true;
    } catch (error) {
      console.error('‚ùå UserService: Unexpected error:', error);
      throw error;
    }
  }

  /**
   * –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –¥—Ä—É–∂–±—É
   */
  static async rejectFriendRequest(requestId: string): Promise<boolean> {
    try {
      console.log('üîç UserService: Rejecting friend request:', requestId);
      
      const { error } = await supabase
        .from('friend_requests')
        .update({ status: 'rejected' })
        .eq('id', requestId);

      if (error) {
        console.error('‚ùå UserService: Error rejecting friend request:', error);
        throw error;
      }

      console.log('‚úÖ UserService: Friend request rejected successfully');
      return true;
    } catch (error) {
      console.error('‚ùå UserService: Unexpected error:', error);
      throw error;
    }
  }

  /**
   * –í–∏–¥–∞–ª–∏—Ç–∏ –¥—Ä—É–≥–∞
   */
  static async removeFriend(friendId: string): Promise<boolean> {
    try {
      console.log('üîç UserService: Removing friend:', friendId);
      
      const currentUser = (await supabase.auth.getUser()).data.user?.id;
      
      // –í–∏–¥–∞–ª—è—î–º–æ –¥—Ä—É–∂–±—É
      const { error } = await supabase
        .from('friendships')
        .delete()
        .or(`and(user1_id.eq.${currentUser},user2_id.eq.${friendId}),and(user1_id.eq.${friendId},user2_id.eq.${currentUser})`);

      if (error) {
        console.error('‚ùå UserService: Error removing friend:', error);
        throw error;
      }

      console.log('‚úÖ UserService: Friend removed successfully');
      return true;
    } catch (error) {
      console.error('‚ùå UserService: Unexpected error:', error);
      throw error;
    }
  }
}